import React, { useContext, useMemo } from 'react';
import PropTypes from 'prop-types';
import ThemeContext from './../theme/ThemeContext';
import cn from './../theme/className';
import useStyles from './../hooks/useStyles';
import {
	borders,
	borderColor,
	bottom,
	display,
	gridGap,
	gridColumnGap,
	gridRowGap,
	gridColumn,
	gridRow,
	gridAutoFlow,
	gridAutoColumns,
	gridAutoRows,
	gridTemplateColumns,
	gridTemplateRows,
	gridTemplateAreas,
	gridArea,
	left,
	maxHeight as maxHeightParser,
	maxWidth as maxWidthParser,
	minHeight as minHeightParser,
	minWidth as minWidthParser,
	opacity,
	position,
	right,
	sizeHeight,
	sizeWidth,
	style,
	top,
	zIndex,
} from 'styled-system';
import { bgColor, borderRadius, fontSize, height, textColor, space, width } from './../styles';

const elevation = style({
	prop: 'elevation',
	key: 'elevation',
});

function Box(props) {
	const {
		className: classNameProp,
		inline,
		align,
		alignContent,
		alignItems,
		alignSelf,
		bg,
		border,
		borderTop,
		borderRight,
		borderBottom,
		borderLeft,
		borderColor,
		bottom,
		color,
		direction,
		display,
		elevation,
		flex,
		flexDirection,
		flexWrap,
		fontSize,
		gridGap,
		gridColumnGap,
		gridRowGap,
		gridColumn,
		gridRow,
		gridAutoFlow,
		gridAutoColumns,
		gridAutoRows,
		gridTemplateColumns,
		gridTemplateRows,
		gridTemplateAreas,
		gridArea,
		left,
		h,
		is,
		justify,
		justifyContent,
		justifySelf,
		m,
		maxHeight,
		maxWidth,
		mb,
		minHeight,
		minWidth,
		ml,
		mr,
		mt,
		mx,
		my,
		order,
		opacity,
		p,
		pb,
		pl,
		position,
		pr,
		pt,
		px,
		py,
		radius,
		right,
		size,
		styles: stylesProp,
		top,
		w,
		zIndex,
		...passThru
	} = props;
	const { theme } = useContext(ThemeContext);
	const Component = props.is;
	const styles = useStyles(
		{
			bg,
			border,
			borderTop,
			borderRight,
			borderBottom,
			borderLeft,
			borderColor,
			bottom,
			color,
			display,
			elevation,
			fontSize,
			gridGap,
			gridColumnGap,
			gridRowGap,
			gridColumn,
			gridRow,
			gridAutoFlow,
			gridAutoColumns,
			gridAutoRows,
			gridTemplateColumns,
			gridTemplateRows,
			gridTemplateAreas,
			gridArea,
			left,
			h,
			m,
			maxHeight,
			maxWidth,
			mb,
			minHeight,
			minWidth,
			ml,
			mr,
			mt,
			mx,
			my,
			opacity,
			p,
			pb,
			pl,
			position,
			pr,
			pt,
			px,
			py,
			right,
			size,
			stylesProp,
			theme,
			top,
			w,
			zIndex,
		},
		[
			bg,
			border,
			borderTop,
			borderRight,
			borderBottom,
			borderLeft,
			borderColor,
			bottom,
			color,
			display,
			elevation,
			fontSize,
			gridGap,
			gridColumnGap,
			gridRowGap,
			gridColumn,
			gridRow,
			gridAutoFlow,
			gridAutoColumns,
			gridAutoRows,
			gridTemplateColumns,
			gridTemplateRows,
			gridTemplateAreas,
			gridArea,
			left,
			h,
			m,
			maxHeight,
			maxWidth,
			mb,
			minHeight,
			minWidth,
			ml,
			mr,
			mt,
			mx,
			my,
			opacity,
			p,
			pb,
			pl,
			position,
			pr,
			pt,
			px,
			py,
			right,
			size,
			stylesProp,
			theme,
			top,
			w,
			zIndex,
		],
		[
			bgColor,
			borders,
			borderColor,
			borderRadius,
			bottom,
			elevation,
			fontSize,
			gridGap,
			gridColumnGap,
			gridRowGap,
			gridColumn,
			gridRow,
			gridAutoFlow,
			gridAutoColumns,
			gridAutoRows,
			gridTemplateColumns,
			gridTemplateRows,
			gridTemplateAreas,
			gridArea,
			left,
			height,
			maxHeightParser,
			maxWidthParser,
			minHeightParser,
			minWidthParser,
			opacity,
			position,
			right,
			sizeHeight,
			sizeWidth,
			space,
			textColor,
			top,
			width,
			zIndex,
		],
	);
	const className = useMemo(() => cn(classNameProp, styles), [classNameProp, styles]);
	return (
		<Component className={className} {...passThru}>
			{props.children}
		</Component>
	);
}

Box.displayName = 'Box';

Box.propTypes = {
	...bgColor.propTypes,
	...borders.propTypes,
	...borderColor.propTypes,
	...borderRadius.propTypes,
	...bottom.propTypes,
	...elevation.propTypes,
	...fontSize.propTypes,
	...gridGap.propTypes,
	...gridColumnGap.propTypes,
	...gridRowGap.propTypes,
	...gridColumn.propTypes,
	...gridRow.propTypes,
	...gridAutoFlow.propTypes,
	...gridAutoColumns.propTypes,
	...gridAutoRows.propTypes,
	...gridTemplateColumns.propTypes,
	...gridTemplateRows.propTypes,
	...gridTemplateAreas.propTypes,
	...gridArea.propTypes,
	...left.propTypes,
	...height.propTypes,
	...maxHeightParser.propTypes,
	...maxWidthParser.propTypes,
	...minHeightParser.propTypes,
	...minWidthParser.propTypes,
	...opacity.propTypes,
	...position.propTypes,
	...right.propTypes,
	...sizeHeight.propTypes,
	...sizeWidth.propTypes,
	...space.propTypes,
	...textColor.propTypes,
	...top.propTypes,
	...width.propTypes,
	...zIndex.propTypes,
	...{
		is: PropTypes.node,
		styles: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
	},
};

Box.defaultProps = {
	is: 'div',
};

export default Box;
